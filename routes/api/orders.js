/* eslint-disable operator-linebreak */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-await-in-loop */
/* eslint-disable max-len */
/* eslint-disable consistent-return */
/* eslint-disable linebreak-style */
const ordersRouter = require('express').Router();
const authenticateJWT = require('../../middlewares/jwt');
const bot = require('../../bot');

const {
  OrderItem,
  Order,
  ModelSneaker,
  Size,
  Count,
  User,
  Mark,
  Status,
  DeliveryType,
  DeliveryData,
  CountSize,
} = require('../../db/models');

function generateOrderId() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 10000 –¥–æ 99999
  return Math.floor(Math.random() * 90000) + 10000;
}

ordersRouter.get('/statuses', async (req, res) => {
  try {
    const statuses = await Status.findAll();
    res.status(201).json(statuses);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

ordersRouter.get('/types/delivery', async (req, res) => {
  try {
    const types = await DeliveryType.findAll();
    res.status(201).json(types);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

ordersRouter.get('/types/delivery/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const type = await DeliveryType.findByPk(id);
    res.status(201).json(type);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

ordersRouter.get('/orders', authenticateJWT, async (req, res) => {
  try {
    const allOrders = await Order.findAll({
      include: [
        User,
        Status,
        DeliveryType,
        DeliveryData,
        {
          model: OrderItem,
          include: [Size, Count, { model: ModelSneaker, include: [Mark] }],
        },
      ],
    });
    const formattedOrders = allOrders.map((order) => ({
      id: order.id,
      user: order.User.name,
      status: order.Status.id,
      deliveryInfo: {
        type: order.DeliveryType.name,
        fullName: order.DeliveryDatum.fullName,
        address: order.DeliveryDatum.address,
        phone: order.DeliveryDatum.phone,
      },
      OrderItems: order.OrderItems.reduce((acc, item) => {
        const existingItem = acc.find(
          (accItem) => accItem.name === item.ModelSneaker.name,
        );
        if (existingItem) {
          existingItem.sizeCounts.push({
            size: item.Size.size,
            count: item.Count.count,
          });
        } else {
          acc.push({
            name: item.ModelSneaker.name,
            mark: item.ModelSneaker.Mark.name,
            sizeCounts: [
              {
                size: item.Size.size,
                count: item.Count.count,
              },
            ],
          });
        }
        return acc;
      }, []),
    }));
    res.status(200).json(formattedOrders);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

ordersRouter.post('/orders', async (req, res) => {
  try {
    const { user, items, delivery } = req.body.data;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userInstance = await User.findOne({ where: { name: user } });
    if (!userInstance) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "–ù–æ–≤—ã–π"
    const newStatus = await Status.findOne({ where: { name: '–ù–æ–≤—ã–π' } });
    if (!newStatus) {
      return res.status(500).json({ message: '–°—Ç–∞—Ç—É—Å "–ù–æ–≤—ã–π" –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const newOrder = await Order.create({
      id: generateOrderId(),
      user_id: userInstance.id,
      status_id: newStatus.id,
      delivery_type_id: delivery.type_id,
    });

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    const deliveryData = {
      order_id: newOrder.id,
      fullName: delivery.data.fullName,
      address: delivery.data.address,
      phone: delivery.data.phoneNumber,
    };

    await DeliveryData.create(deliveryData);

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö
    const orderedItems = [];

    for (const item of items) {
      const selectCount = await Count.findOne({ where: { count: item.count_id } });

      const countSize = await CountSize.findOne({
        where: {
          model_id: item.model_id,
          size_id: item.size_id,
        },
        include: [
          {
            model: Count,
            as: 'Count',
          },
          {
            model: ModelSneaker,
            as: 'ModelSneaker',
            include: [{ model: Mark, as: 'Mark' }],
          },
          {
            model: Size,
            as: 'Size',
          },
        ],
      });
      console.log();
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
      if (!countSize || countSize.Count.count < selectCount.count) {
        return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ' });
      }

      const newCount = await Count.findOne({
        where: { count: countSize.Count.count - selectCount.count },
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞
      await CountSize.update(
        { count_id: newCount.id },
        { where: { size_id: item.size_id, model_id: item.model_id } },
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –≤ –º–∞—Å—Å–∏–≤
      orderedItems.push({
        mark: countSize.ModelSneaker.Mark.name,
        model: countSize.ModelSneaker.name,
        size: countSize.Size.size,
        count: countSize.Count.count,
      });
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ OrderItem
      await OrderItem.create({
        order_id: newOrder.id,
        model_id: item.model_id,
        size_id: item.size_id,
        count_id: selectCount.id,
      });
    }
    const typeDelivery = await DeliveryType.findByPk(delivery.type_id);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö, —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    const itemDetails = orderedItems.length
      ? orderedItems.map((item) => `  –ú–æ–¥–µ–ª—å üëü: ${item.mark} ${item.model}, –†–∞–∑–º–µ—Ä: ${item.size} EUR, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.count}`).join('\n')
      : '–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ –∑–∞–∫–∞–∑–µ.';

    const deliveryLines = [];
    if (typeDelivery.name) {
      deliveryLines.push(` –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ üöó: ${typeDelivery.name}`);
    }
    if (deliveryData.fullName) {
      deliveryLines.push(`   –§–ò–û üëë: ${deliveryData.fullName}`);
    }
    if (deliveryData.address) {
      deliveryLines.push(`   –ê–¥—Ä–µ—Å üè†: ${deliveryData.address}`);
    }
    if (deliveryData.phone) {
      deliveryLines.push(`   –¢–µ–ª–µ—Ñ–æ–Ω üìû: ${deliveryData.phone}`);
    }

    const deliveryInfo = deliveryLines.length > 0 ? deliveryLines.join('\n') : '–î–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.';

    const message = ` –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ ${newOrder.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚ú®
  
  –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ üìå:
  ${deliveryInfo}
  
  –ú–æ–¥–µ–ª–∏ –≤ –∑–∞–∫–∞–∑–µ üì¶:
  ${itemDetails}
  
  –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üì±`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    await bot.sendMessage(userInstance.chatid, message);

    return res.status(201).json({ order: newOrder, delivery: deliveryData });
  } catch (error) {
    console.error(error); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.' });
  }
});

ordersRouter.put('/orders/status', authenticateJWT, async (req, res) => {
  try {
    const { orderId, statusId } = req.body;

    const orderInstance = await Order.findByPk(orderId);
    const userInstance = await User.findByPk(orderInstance.user_id);

    if (!orderInstance) {
      return res.status(404).json({ message: 'Order not found' });
    }

    const statusInstance = await Status.findByPk(statusId);
    if (!statusInstance) {
      return res.status(404).json({ message: 'Status not found' });
    }

    let notificationMessage = '';

    if (statusInstance.name === '–û—Ç–∫–ª–æ–Ω–µ–Ω') {
      const orderItems = await OrderItem.findAll({
        where: { order_id: orderInstance.id },
        include: {
          model: Count,
          as: 'Count',
        },
      });

      for (const item of orderItems) {
        const countSize = await CountSize.findOne({
          where: {
            model_id: item.model_id,
            size_id: item.size_id,
          },
          include: {
            model: Count,
            as: 'Count',
          },
        });
        if (countSize) {
          const oldCount = await Count.findOne({
            where: { count: countSize.Count.count + item.Count.count },
          });
          await CountSize.update(
            { count_id: oldCount.id },
            {
              where: {
                model_id: countSize.model_id,
                size_id: countSize.size_id,
              },
            },
          );
        }
      }

      await OrderItem.destroy({
        where: { order_id: orderInstance.id },
      });

      await DeliveryData.destroy({
        where: { order_id: orderInstance.id },
      });

      await orderInstance.destroy();

      notificationMessage =
        `–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ ${orderInstance.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!`;
      await bot.sendMessage(userInstance.chatid, notificationMessage);

      return res.status(200).json({ message: 'Order has been deleted' });
    }

    orderInstance.status_id = statusId;
    await orderInstance.save();

    if (statusInstance.name === '–í —Ä–∞–±–æ—Ç–µ') {
      notificationMessage =
        `–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ ${orderInstance.id} –≤ —Ä–∞–±–æ—Ç–µ. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.`;
    } else if (statusInstance.name === '–í—ã–ø–æ–ª–Ω–µ–Ω') {
      notificationMessage =
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç!';
    }

    await bot.sendMessage(userInstance.chatid, notificationMessage);

    res.status(200).json(orderInstance);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = ordersRouter;
